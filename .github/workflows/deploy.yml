name: "Deploy FastAPI Backend"
run-name: ${{ github.actor }} is deploying FastAPI to ECS 🚀

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: backend
  ECS_CLUSTER: main-cluster
  ECS_SERVICE: backend-service

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub-Actions-Deploy

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build the Docker image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./app
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest ./app

          # Push both tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update ECS service
        run: |
          # Force ECS to deploy the new image
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment

      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ECS service to stabilize..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE

      - name: Get service status
        run: |
          # Get the public IP of the running task
          TASK_ARN=$(aws ecs list-tasks --cluster $ECS_CLUSTER --service-name $ECS_SERVICE --query 'taskArns[0]' --output text)

          if [ "$TASK_ARN" != "None" ] && [ "$TASK_ARN" != "" ]; then
            ENI_ID=$(aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks $TASK_ARN --query 'tasks[0].attachments[0].details[?name==`networkInterfaceId`].value' --output text)
            PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID --query 'NetworkInterfaces[0].Association.PublicIp' --output text)
            
            echo "🎉 Deployment successful!" >> $GITHUB_STEP_SUMMARY
            echo "📍 FastAPI Backend URL: http://$PUBLIC_IP:8000" >> $GITHUB_STEP_SUMMARY
            echo "📚 API Docs: http://$PUBLIC_IP:8000/docs" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Could not get task information" >> $GITHUB_STEP_SUMMARY
          fi
